#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define SYMBOLS 1
#define MOVEMENT 2

#define L_SPC &lt SYMBOLS SPACE
#define R_RET &lt MOVEMENT RET

/ {

    combos {
      compatible = "zmk,combos";
      combo_esc {
        timeout-ms = <25>;
        key-positions = <6 7>;
        bindings = <&kp ESC>;
      };
      combo_enter {
        timeout-ms = <25>;
        key-positions = <16 17>;
        bindings = <&kp RET>;
      };
      combo_tab {
        timeout-ms = <25>;
        key-positions = <26 27>;
        bindings = <&kp TAB>;
      };
      //
      combo_bkspc {
        timeout-ms = <25>;
        key-positions = <15 16>;
        bindings = <&kp BSPC>;
      };

      // modifier combos
      combo_ctl {
        timeout-ms = <25>;
        key-positions = <17 18>;
        bindings = <&kp RCTRL>;
      };
      combo_ctl_l {
        timeout-ms = <25>;
        key-positions = <11 12>;
        bindings = <&kp LCTRL>;
      };
      combo_alt {
        timeout-ms = <25>;
        key-positions = <27 28>;
        bindings = <&kp LALT>;
      };
      combo_alt_l {
        timeout-ms = <25>;
        key-positions = <21 22>;
        bindings = <&kp LALT>;
      };
      combo_gui {
        timeout-ms = <25>;
        key-positions = <7 8>;
        bindings = <&kp RGUI>;
      };
      combo_gui_l {
        timeout-ms = <25>;
        key-positions = <1 2>;
        bindings = <&kp LGUI>;
      };

      // alt ctrl
      combo_alt_ctrl_l {
        timeout-ms = <25>;
        key-positions = <3 4>;
        bindings = <&kp LA(LCTRL)>;
      };
      combo_alt_ctrl_r {
        timeout-ms = <25>;
        key-positions = <5 6>;
        bindings = <&kp LA(LCTRL)>;
      };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
            //  0         1         2         3         4                  /*|*/          5         6         7         8        9
            &kp Q     &kp W     &kp E     &kp R     &kp T                  /*|*/      &kp Y     &kp U     &kp I     &kp O    &kp P   
            // 10        11        12        13        14                  /*|*/         15        16        17        18       19
            &kp A     &kp S     &kp D     &kp F     &kp G                  /*|*/      &kp H     &kp J     &kp K     &kp L    &kp SEMI
            // 20        21        22        23        24                  /*|*/         25        26        27        28       29
            &kp Z     &kp X     &kp C     &kp V     &kp B                  /*|*/      &kp N     &kp M     &kp COMMA &kp DOT  &kp FSLH
                                &mo MOVEMENT  &mt RSHFT RET &mt RCTRL ESC  /*|*/     &kp SPACE   &mo SYMBOLS &kp RGUI
            >;
        };

      symbols_layer {
          bindings = <
          &kp EXCL &kp AT &kp HASH &kp DOLLAR &kp PIPE /*|*/ &kp LANG1 &kp N7 &kp N8 &kp N9 &kp DOT
          &kp LBRC &kp RBRC &kp SQT &kp GRAVE &kp BSLH /*|*/ &kp BSPC &kp N4 &kp N5 &kp N6 &kp EQUAL
          &kp LBKT &kp RBKT &kp LPAR &kp RPAR &kp AMPS /*|*/    &kp N0 &kp N1 &kp N2 &kp N3 &kp MINUS
                                 &trans  &trans &trans /*|*/ &trans &trans &trans
          >;
      };


      movement_layer {
          bindings = <
          &kp HOME &trans &kp PG_DN &kp PG_UP &trans   /*|*/ &kp RET &bt BT_PRV &trans     &bt BT_NXT &kp DEL
            &kp END &kp LEFT &kp DOWN &kp UP &kp RIGHT /*|*/ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &kp INS
                    &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 /*|*/ &bt BT_CLR &trans &trans &trans &kp ESC
                                 &trans  &trans &trans /*|*/ &kp LALT &kp RSHFT &kp RCTRL
          >;
      };

    };
};
