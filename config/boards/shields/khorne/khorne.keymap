
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&soft_off {
  hold-time-ms = <5000>;
};
#define DEFAULT 0
#define SYMBOLS 1
#define MOVEMENT 2
#define ZMK 3
/ {
combos {
compatible = "zmk,combos";
combo_power-off_1 {
timeout-ms = <25>;
bindings = <&kp K_POWER>;
key-positions = <0 9>;
};
combo_esc_1 {
timeout-ms = <25>;
bindings = <&kp ESC>;
key-positions = <6 7>;
};
combo_esc_2 {
timeout-ms = <25>;
bindings = <&kp ESC>;
key-positions = <3 2>;
};
combo_enter_1 {
timeout-ms = <25>;
bindings = <&kp RET>;
key-positions = <16 17>;
};
combo_enter_2 {
timeout-ms = <25>;
bindings = <&kp RET>;
key-positions = <12 13>;
};
combo_tab_1 {
timeout-ms = <25>;
bindings = <&kp TAB>;
key-positions = <26 27>;
};
combo_tab_2 {
timeout-ms = <25>;
bindings = <&kp TAB>;
key-positions = <22 23>;
};
combo_bkspc_1 {
timeout-ms = <25>;
bindings = <&kp BSPC>;
key-positions = <15 16>;
};
combo_bkspc_2 {
timeout-ms = <25>;
bindings = <&kp BSPC>;
key-positions = <13 14>;
};
combo_ctl_r_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RCTRL>;
key-positions = <17 18>;
};
combo_ctl_l_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LCTRL>;
key-positions = <11 12>;
};
combo_alt_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LALT>;
key-positions = <27 28>;
};
combo_alt_2 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LALT>;
key-positions = <21 22>;
};
combo_gui_r_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RGUI>;
key-positions = <7 8>;
};
combo_gui_l_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LGUI>;
key-positions = <1 2>;
};
combo_alt_ctrl_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(LCTRL)>;
key-positions = <3 4>;
};
combo_alt_ctrl_2 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(LCTRL)>;
key-positions = <5 6>;
};
combo_alt_ctrl_3 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(LCTRL)>;
key-positions = <16 17 18>;
};
combo_alt_ctrl_4 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(LCTRL)>;
key-positions = <11 12 13>;
};
combo_to_zmk_1 {
timeout-ms = <25>;
bindings = <&mo ZMK>;
key-positions = <20 21 22>;
};
combo_shift_alt_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RS(LALT)>;
key-positions = <26 27 28>;
};
combo_shift_alt_2 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RS(LALT)>;
key-positions = <21 22 23>;
};
combo_shift_gui_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RS(LGUI)>;
key-positions = <6 7 8>;
};
combo_shift_gui_2 {
timeout-ms = <25>;
slow-release;
bindings = <&kp RS(LGUI)>;
key-positions = <1 2 3>;
};
combo_shift_alt_ctrl_1 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(RS(LCTRL))>;
key-positions = <25 26>;
};
combo_shift_alt_ctrl_2 {
timeout-ms = <25>;
slow-release;
bindings = <&kp LA(RS(LCTRL))>;
key-positions = <23 24>;
};
};

keymap {
compatible = "zmk,keymap";

default_layer {
bindings = <
&kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P 
&kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI 
&kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp FSLH 
  &mo MOVEMENT &mt RSHFT RET &mt RCTRL ESC &kp SPACE &mo SYMBOLS &kp RGUI   

>;
};
symbols_layer {
bindings = <
&kp EXCL &kp AT &kp HASH &kp DOLLAR &kp PIPE &kp LANG1 &kp N7 &kp N8 &kp N9 &kp DOT 
&kp LBRC &kp RBRC &kp SQT &kp GRAVE &kp BSLH &kp BSPC &kp N4 &kp N5 &kp N6 &kp EQUAL 
&kp LBKT &kp RBKT &kp LPAR &kp RPAR &kp AMPS &kp N0 &kp N1 &kp N2 &kp N3 &kp MINUS 
  &trans &trans &trans &trans &trans &trans   

>;
};
movement_layer {
bindings = <
&kp HOME &trans &kp PG_DN &kp PG_UP &trans &to ZMK &bt BT_PRV &trans &bt BT_NXT &kp DEL 
&kp END &kp LEFT &kp DOWN &kp UP &kp RIGHT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &kp INS 
&kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &bt BT_CLR &trans &trans &trans &kp ESC 
  &trans &trans &trans &kp LALT &kp RSHFT &kp RCTRL   

>;
};
zmk_layer {
bindings = <
&to DEFAULT &bt BT_PRV &bt BT_CLR &bt BT_NXT &soft_off &to DEFAULT &trans &trans &trans &trans 
&bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &trans &trans &trans &trans &trans 
&trans &trans &trans &trans &kp K_POWER &trans &trans &trans &trans &trans 
  &trans &trans &trans &trans &trans &trans   

>;
};

};

};